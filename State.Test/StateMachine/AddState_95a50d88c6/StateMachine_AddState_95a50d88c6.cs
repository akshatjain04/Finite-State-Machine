// Test generated by RoostGPT for test MiniPythonProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

using NUnit.Framework;
using Moq;
using System.Collections.Generic;
using FiniteStateMachine;

namespace FiniteStateMachine.Test
{
    [TestFixture]
    public class StateMachine_AddState_95a50d88c6
    {
        private StateMachine<string> stateMachine;
        private Dictionary<string, State<string>> m_states;

        [SetUp]
        public void Setup()
        {
            m_states = new Dictionary<string, State<string>>();
            stateMachine = new StateMachine<string>(m_states);
        }

        [Test]
        public void AddState_StateBelongsToStateMachine_StateAdded()
        {
            var mockState = new Mock<State<string>>();
            mockState.Setup(s => s.StateMachine).Returns(stateMachine);

            stateMachine.AddState(mockState.Object);

            Assert.Contains(mockState.Object, m_states);
        }
        
        [Test]
        public void AddState_StateDoesNotBelongToStateMachine_ExceptionThrown()
        {
            var otherStateMachine = new StateMachine<string>(new Dictionary<string, State<string>>());
            var mockState = new Mock<State<string>>();
            mockState.Setup(s => s.StateMachine).Returns(otherStateMachine);

            var ex = Assert.Throws<InvalidOperationException>(() => stateMachine.AddState(mockState.Object));
            Assert.That(ex.Message, Is.EqualTo("[FiniteStateMachine::AddState()] -> The State can only be added to the State Machine that was used to create it."));
        }

        [TearDown]
        public void TearDown()
        {
            m_states.Clear();
        }
    }
}
