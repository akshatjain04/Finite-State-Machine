// Test generated by RoostGPT for test MiniPythonProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

using NUnit.Framework;
using System;
using System.Collections.Generic;
using FiniteStateMachine;

namespace FiniteStateMachine.Test
{
    public class StateMachine_AddState_95a50d88c6
    {
        private StateMachine<string> _stateMachine;
        private Dictionary<string, State<string>> _states;

        // setup for each test
        [SetUp]
        public void SetUp()
        {
            _states = new Dictionary<string, State<string>>();
            _stateMachine = new StateMachine<string>(_states);
        }

        // Case when state is correctly added
        [Test]
        public void AddState_ShouldAddState_WhenStateBelongsToTheMachine()
        {
            var state = new State<string>("State1", _stateMachine);
            _stateMachine.AddState(state);
            Assert.That(_states.ContainsKey("State1"), Is.True);
        }

        // Case when state belongs to another machine
        [Test]
        public void AddState_ShouldThrowException_WhenStateBelongsToAnotherMachine()
        {
            var anotherStateMachine = new StateMachine<string>(new Dictionary<string, State<string>>());
            var state = new State<string>("State1", anotherStateMachine);

            var ex = Assert.Throws<Exception>(() => _stateMachine.AddState(state));
            Assert.That(ex.Message, Is.EqualTo("[FiniteStateMachine::AddState()] -> The State can only be added to the State Machine that was used to create it."));
        }

        // Case when state is null
        [Test]
        public void AddState_ShouldThrowException_WhenStateIsNull()
        {
            var ex = Assert.Throws<ArgumentNullException>(() => _stateMachine.AddState(null));
            Assert.That(ex.ParamName, Is.EqualTo("state"));
        }

        // Case when state is already added
        [Test]
        public void AddState_ShouldThrowException_WhenStateAlreadyAdded()
        {
            var state = new State<string>("State1", _stateMachine);
            _stateMachine.AddState(state);

            var ex = Assert.Throws<ArgumentException>(() => _stateMachine.AddState(state));
            Assert.That(ex.Message, Contains.Substring("An item with the same key has already been added."));
        }
    }
}
