// Test generated by RoostGPT for test MiniPythonProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

using NUnit.Framework;
using Moq;
using System;
using System.Collections.Generic;
using FiniteStateMachine;

namespace FiniteStateMachine.Test
{
    [TestFixture]
    public class StateMachine_MoveTo_c8325e5825
    {
        private FiniteStateMachine<T> FiniteStateMachine;
        private Mock<Dictionary<T, IState<T>>> MockStates;

        [SetUp]
        public void SetUp()
        {
            this.MockStates = new Mock<Dictionary<T, IState<T>>>();
            this.FiniteStateMachine = new FiniteStateMachine<T>(MockStates.Object);
        }

        [Test]
        public void MoveTo_ShouldReturnNewStateKey_WhenTargetStateExists()
        {
            // Arrange
            var targetStateKey = "NewState";
            var previousStateKey = "OldState";
            var newState = new Mock<IState<T>>();
            newState.Setup(s => s.StateKey).Returns(targetStateKey);
            this.MockStates.Setup(x => x.ContainsKey(targetStateKey)).Returns(true);
            this.MockStates.Setup(x => x[targetStateKey]).Returns(newState.Object);

            // Act
            var result = this.FiniteStateMachine.MoveTo(targetStateKey);

            // Assert
            Assert.That(result, Is.EqualTo(targetStateKey));
        }

        [Test]
        public void MoveTo_ShouldThrowException_WhenTargetStateDoesNotExist()
        {
            // Arrange
            var targetStateKey = "NewState";

            this.MockStates.Setup(x => x.ContainsKey(targetStateKey)).Returns(false);

            // Act & Assert
            var ex = Assert.Throws<Exception>(() => this.FiniteStateMachine.MoveTo(targetStateKey));
            Assert.That(ex.Message, Is.EqualTo("[FiniteStateMachine::MoveTo()] -> Target state did not exist. Please add the State<T> for key: '" + targetStateKey));
        }
    }
}

