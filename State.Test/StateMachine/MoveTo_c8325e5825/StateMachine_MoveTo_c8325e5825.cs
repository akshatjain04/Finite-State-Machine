// Test generated by RoostGPT for test MiniPythonProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

using NUnit.Framework;
using FiniteStateMachine;
using System.Collections.Generic;

namespace FiniteStateMachine.Test
{
    [TestFixture]
    public class StateMachine_MoveTo_Test
    {
        private FiniteStateMachine<int> fsm;
        private Dictionary<int, State<int>> states;
    
        [SetUp]
        public void SetUp()
        {
            states = new Dictionary<int, State<int>>()
            {
                {1, new State<int>(1)},
                {2, new State<int>(2)},
                {3, new State<int>(3)}
            };
        
            fsm = new FiniteStateMachine<int>(states);
        }

        [Test]
        public void MoveTo_State_Exists_Returns_New_State_Key()
        {
            var newStateKey = fsm.MoveTo(2);

            Assert.AreEqual(2,newStateKey);
        }

        [Test]
        public void MoveTo_State_Does_Not_Exist_Throws_Exception()
        {
            Assert.That(() => fsm.MoveTo(4), 
            Throws.Exception.With.Message.EqualTo("[FiniteStateMachine::MoveTo()] -> Target state did not exist. Please add the State<int> for key: '4'"));
        }

        [Test]
        public void MoveTo_State_Exists_Ends_Current_State()
        {
            var inititalStateKey = fsm.MoveTo(1);
            var initialState = states[inititalStateKey];

            fsm.MoveTo(2);

            Assert.IsFalse(initialState.Active);
        }

        [Test]
        public void MoveTo_State_Exists_Starts_New_State()
        {
            var newStateKey = fsm.MoveTo(3);
            var newState = states[newStateKey];

            Assert.IsTrue(newState.Active);
        }
    }
}
