// Test generated by RoostGPT for test MiniPythonProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

using NUnit.Framework;

namespace FiniteStateMachine.Test
{
    [TestFixture]
    public class StateBase__Update_8c1484250f_Tests
    {
        private static readonly object[] testCases =
        {
            new object[] { 0.5f },
            new object[] { -1.0f },
            new object[] { float.MaxValue },
            new object[] { float.MinValue },
        };

        [TestCaseSource(nameof(testCases))]
        public void _Update_CallsUpdateWithDt(float dt)
        {
            // Arrange
            var mockStateBase = new Moq.Mock<StateBase>();
            // TODO: Replace with a real instance if necessary

            // Act
            mockStateBase.Object._Update(dt);

            // Testee was created as Mock, not Mock<StateBase>(), to get the Protected methods for verification
            mockStateBase.Protected().Verify(
                "Update", 
                Moq.Times.Once(),  // regardless of the value of dt, Update should be called once
                dt); 
        }

        [TestCaseSource(nameof(testCases))]
        public void _Update_ThrowsExceptionWhenUpdateThrowsException(float dt)
        {
            // Arrange
            var mockStateBase = new Moq.Mock<StateBase>();
            mockStateBase.Protected().Setup("Update", dt).Throws(new InvalidOperationException());

            // Act & Assert
            Assert.That(() => mockStateBase.Object._Update(dt), Throws.InstanceOf<InvalidOperationException>());
        }
    }
}
