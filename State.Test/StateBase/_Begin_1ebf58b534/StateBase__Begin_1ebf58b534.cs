// Test generated by RoostGPT for test MiniPythonProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

using NUnit.Framework;
using FiniteStateMachine;
using Moq;
using System;

namespace FiniteStateMachine.Tests
{
    [TestFixture]
    public class StateBase__Begin_1ebf58b534Tests
    {
        private Mock<FiniteStateMachine> _mockFiniteStateMachine;
        private StateBase__Begin_1ebf58b534 _stateBase;

        [SetUp]
        public void SetUp()
        {
            _mockFiniteStateMachine = new Mock<FiniteStateMachine>();
            _stateBase = new StateBase__Begin_1ebf58b534(_mockFiniteStateMachine.Object);
        }

        [Test]
        public void _Begin_ShouldInvokeFiniteStateOnStateBeganEvent_WhenCalled()
        {
            var args = new FiniteStateChangeEventArgs(StateType.One);
            var previousStateKey = StateType.Two;

            _mockFiniteStateMachine.Setup(fsm => fsm.OnStateBegan).Returns(new Action<FiniteStateBeganEventArgs>(args => { }));

            _stateBase._Begin(args, previousStateKey);

            _mockFiniteStateMachine.Verify(fsm => fsm.OnStateBegan.Invoke(It.IsAny<FiniteStateBeganEventArgs>()), Times.Once);
        }

        [Test]
        public void _Begin_ShouldCallBeginFunction_WhenCalled()
        {
            var args = new FiniteStateChangeEventArgs(StateType.One);
            var previousStateKey = StateType.Two;

            _stateBase._Begin(args, previousStateKey);

            Assert.That(_stateBase.CurrentStateType, Is.EqualTo(previousStateKey));
        }

        // TODO: You may need to add more tests here to cover edge cases or specific conditions
    }
}
